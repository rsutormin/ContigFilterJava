package contigfilterjava;

import java.io.File;
import us.kbase.auth.AuthToken;
import us.kbase.common.service.JsonServerMethod;
import us.kbase.common.service.JsonServerServlet;
import us.kbase.common.service.JsonServerSyslog;
import us.kbase.common.service.RpcContext;
import us.kbase.common.service.UObject;

//BEGIN_HEADER
import java.net.URL;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import us.kbase.common.service.Tuple11;
import us.kbase.common.service.UObject;
import us.kbase.kbasegenomes.Contig;
import us.kbase.kbasegenomes.ContigSet;
import us.kbase.workspace.ObjectIdentity;
import us.kbase.workspace.ObjectSaveData;
import us.kbase.workspace.ProvenanceAction;
import us.kbase.workspace.SaveObjectsParams;
import us.kbase.workspace.WorkspaceClient;
//END_HEADER

/**
 * <p>Original spec-file module name: ContigFilterJava</p>
 * <pre>
 * A KBase module: ContigFilterJava
 * </pre>
 */
public class ContigFilterJavaServer extends JsonServerServlet {
    private static final long serialVersionUID = 1L;

    //BEGIN_CLASS_HEADER
    private final String wsUrl;
    //END_CLASS_HEADER

    public ContigFilterJavaServer() throws Exception {
        super("ContigFilterJava");
        //BEGIN_CONSTRUCTOR
        wsUrl = config.get("workspace-url");
        //END_CONSTRUCTOR
    }

    /**
     * <p>Original spec-file function name: filter_contigs</p>
     * <pre>
     * Filter contigs in a ContigSet by DNA length
     * </pre>
     * @param   params   instance of type {@link contigfilterjava.FilterContigsParams FilterContigsParams}
     * @return   instance of type {@link contigfilterjava.FilterContigsResults FilterContigsResults}
     */
    @JsonServerMethod(rpc = "${method_name}.filter_contigs", async=true)
    public FilterContigsResults filterContigs(FilterContigsParams params, AuthToken authPart, RpcContext jsonRpcContext) throws Exception {
        FilterContigsResults returnVal = null;
        //BEGIN filter_contigs
        
        System.out.println("Starting filter contigs method.");
        
        if (params.getWorkspace() == null)
            throw new IllegalStateException("Parameter workspace is not set in input arguments");
        String workspaceName = params.getWorkspace();
        if (params.getContigsetId() == null)
            throw new IllegalStateException("Parameter contigset_id is not set in input arguments");
        String contigsetId = params.getContigsetId();
        if (params.getMinLength() == null)
            throw new IllegalStateException("Parameter min_length is not set in input arguments");
        long minLength = params.getMinLength();
        if (minLength < 0)
            throw new IllegalStateException("min_length parameter shouldn't be negative (" + minLength + ")");
        
        WorkspaceClient wc = new WorkspaceClient(new URL(this.wsUrl), authPart);
        wc.setAuthAllowedForHttp(true);
        ContigSet contigSet;
        try {
            contigSet = wc.getObjects(Arrays.asList(new ObjectIdentity().withRef(
                    workspaceName + "/" + contigsetId))).get(0).getData().asClassInstance(ContigSet.class);
        } catch (Exception ex) {
            throw new IllegalStateException("Error loading original ContigSet object from workspace", ex);
        }
        
        System.out.println("Got ContigSet data.");

        int nInitialContigs = contigSet.getContigs().size();
        List<Contig> newContigs = new ArrayList<Contig>();
        for(Contig ctg : contigSet.getContigs()) {
            if (ctg.getLength() >= minLength)
                newContigs.add(ctg);
        }
        int nContigsRemaining = newContigs.size();
        contigSet.setContigs(newContigs);
        
        System.out.println("Filtered ContigSet to " + nContigsRemaining + " contigs out of " + nInitialContigs);
        
        Tuple11<Long, String, String, String, Long, String, Long, String, String, Long, Map<String,String>> info;
        try {
            info = wc.saveObjects(new SaveObjectsParams().withWorkspace(workspaceName)
                .withObjects(Arrays.asList(new ObjectSaveData()
                .withType("KBaseGenomes.ContigSet").withName(contigsetId)
                .withData(new UObject(contigSet))
                .withProvenance((List<ProvenanceAction>)jsonRpcContext.getProvenance())))).get(0);
        } catch (Exception ex) {
            throw new IllegalStateException("Error saving filtered ContigSet object to workspace", ex);
        }
                        
        System.out.println("saved:" + info);
        
        String newRef = info.getE7() + "/" + info.getE1() + "/" + info.getE5();
        returnVal = new FilterContigsResults().withNewContigsetRef(newRef)
                .withNInitialContigs((long)nInitialContigs)
                .withNContigsRemoved((long)nInitialContigs - (long)nContigsRemaining)
                .withNContigsRemaining((long)nContigsRemaining);
        
        System.out.println("returning:" + returnVal);
        
        //END filter_contigs
        return returnVal;
    }

    public static void main(String[] args) throws Exception {
        if (args.length == 1) {
            new ContigFilterJavaServer().startupServer(Integer.parseInt(args[0]));
        } else if (args.length == 3) {
            JsonServerSyslog.setStaticUseSyslog(false);
            JsonServerSyslog.setStaticMlogFile(args[1] + ".log");
            new ContigFilterJavaServer().processRpcCall(new File(args[0]), new File(args[1]), args[2]);
        } else {
            System.out.println("Usage: <program> <server_port>");
            System.out.println("   or: <program> <context_json_file> <output_json_file> <token>");
            return;
        }
    }
}
